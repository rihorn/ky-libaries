{"version":3,"file":"localStorage.js","sourceRoot":"","sources":["localStorage.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,4CAAuC;IACvC,sCAA2F;IAG3F,kDAA0C;IAE1C,mBAAmC,EAAU,EAAE,QAAqB,EAAE,QAA0B;QAC/F,MAAM,CAAC,UAAC,KAA0B,EAAE,MAAqB;YACxD,IAAM,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC1C,IAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI;gBAC3B,IAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAC/B,MAAM,CAAC,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,EAAE,KAAK,OAAA,EAAE,CAAC;YAC7C,CAAC,CAAC,CAAC;YACH,gBAAM,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YACtD,QAAQ,IAAI,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACrC,CAAC,CAAC;IACH,CAAC;IAVD,8BAUC;IAED,cAAwB,EAAU,EAAE,KAAe;QAClD,IAAI,IAAI,GAAG,gBAAM,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC3C,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACV,IAAI,CAAC;gBACJ,IAAM,UAAU,GAAU,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAC3C,IAAM,YAAU,GAAG,UAAU,CAAC,GAAG,CAAC,UAAC,IAAI;oBACtC,MAAM,CAAC,gBAAG,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;gBACpD,CAAC,CAAC,CAAC;gBACH,yBAAe,CAAC,oBAAoB,EAAE,CAAC,cAAM,OAAA,YAAU,EAAV,CAAU,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;YAC5F,CAAC;YAAC,KAAK,CAAC,CAAC,IAAD,CAAC;gBACR,cAAc;YACf,CAAC;QACF,CAAC;IACF,CAAC;IAbD,oBAaC","sourcesContent":["import global from '../../shim/global';\nimport { ProcessError, ProcessResult, ProcessCallback, processExecutor } from '../process';\nimport { Store } from '../Store';\nimport { GetPaths } from '../StoreProvider';\nimport { add } from '../state/operations';\n\nexport function collector<T = any>(id: string, getPaths: GetPaths<T>, callback?: ProcessCallback): ProcessCallback {\n\treturn (error: ProcessError | null, result: ProcessResult): void => {\n\t\tconst paths = getPaths(result.store.path);\n\t\tconst data = paths.map((path) => {\n\t\t\tconst state = result.get(path);\n\t\t\treturn { meta: { path: path.path }, state };\n\t\t});\n\t\tglobal.localStorage.setItem(id, JSON.stringify(data));\n\t\tcallback && callback(error, result);\n\t};\n}\n\nexport function load<T>(id: string, store: Store<T>) {\n\tlet data = global.localStorage.getItem(id);\n\tif (data) {\n\t\ttry {\n\t\t\tconst parsedData: any[] = JSON.parse(data);\n\t\t\tconst operations = parsedData.map((item) => {\n\t\t\t\treturn add(store.path(item.meta.path), item.state);\n\t\t\t});\n\t\t\tprocessExecutor('local-storage-load', [() => operations], store, undefined, undefined)({});\n\t\t} catch {\n\t\t\t// do nothing?\n\t\t}\n\t}\n}\n"]}