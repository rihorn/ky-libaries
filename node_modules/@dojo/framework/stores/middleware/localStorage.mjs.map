{"version":3,"file":"localStorage.mjs","sourceRoot":"","sources":["localStorage.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,mBAAmB,CAAC;AACvC,OAAO,EAAgD,eAAe,EAAE,MAAM,YAAY,CAAC;AAG3F,OAAO,EAAE,GAAG,EAAE,MAAM,qBAAqB,CAAC;AAE1C,MAAM,oBAA6B,EAAU,EAAE,QAAqB,EAAE,QAA0B;IAC/F,MAAM,CAAC,CAAC,KAA0B,EAAE,MAAqB,EAAQ,EAAE;QAClE,MAAM,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC1C,MAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YAC/B,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAC/B,MAAM,CAAC,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,CAAC;QAC7C,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QACtD,QAAQ,IAAI,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACrC,CAAC,CAAC;AACH,CAAC;AAED,MAAM,eAAkB,EAAU,EAAE,KAAe;IAClD,IAAI,IAAI,GAAG,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC3C,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACV,IAAI,CAAC;YACJ,MAAM,UAAU,GAAU,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC3C,MAAM,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;gBAC1C,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YACpD,CAAC,CAAC,CAAC;YACH,eAAe,CAAC,oBAAoB,EAAE,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;QAC5F,CAAC;QAAC,KAAK,CAAC,CAAC,IAAD,CAAC;YACR,cAAc;QACf,CAAC;IACF,CAAC;AACF,CAAC","sourcesContent":["import global from '../../shim/global';\nimport { ProcessError, ProcessResult, ProcessCallback, processExecutor } from '../process';\nimport { Store } from '../Store';\nimport { GetPaths } from '../StoreProvider';\nimport { add } from '../state/operations';\n\nexport function collector<T = any>(id: string, getPaths: GetPaths<T>, callback?: ProcessCallback): ProcessCallback {\n\treturn (error: ProcessError | null, result: ProcessResult): void => {\n\t\tconst paths = getPaths(result.store.path);\n\t\tconst data = paths.map((path) => {\n\t\t\tconst state = result.get(path);\n\t\t\treturn { meta: { path: path.path }, state };\n\t\t});\n\t\tglobal.localStorage.setItem(id, JSON.stringify(data));\n\t\tcallback && callback(error, result);\n\t};\n}\n\nexport function load<T>(id: string, store: Store<T>) {\n\tlet data = global.localStorage.getItem(id);\n\tif (data) {\n\t\ttry {\n\t\t\tconst parsedData: any[] = JSON.parse(data);\n\t\t\tconst operations = parsedData.map((item) => {\n\t\t\t\treturn add(store.path(item.meta.path), item.state);\n\t\t\t});\n\t\t\tprocessExecutor('local-storage-load', [() => operations], store, undefined, undefined)({});\n\t\t} catch {\n\t\t\t// do nothing?\n\t\t}\n\t}\n}\n"]}